import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
    id "com.gradle.plugin-publish" version "0.12.0"
    id "java-gradle-plugin"
}

ext {
    bintrayPackage = 'serenity-gradle-plugin'
    projectDescription = 'Serenity Gradle Plugin'
}

// Use java-gradle-plugin to generate plugin descriptors and specify plugin ids
gradlePlugin {
    plugins {
        greetingsPlugin {
            id = 'net.serenitybdd.plugins.gradle'
            implementationClass = 'net.serenitybdd.plugins.gradle.SerenityPlugin'
        }
    }
}

pluginBundle {
    website = 'http://www.serenity-bdd.info/'
    vcsUrl = 'https://github.com/serenity-bdd/serenity-core'
    description = 'Serenity BDD Gradle Plugin'
    tags = ['serenity', 'bdd', 'cucumber']

    plugins {
        greetingsPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'Serenity BDD Gradle plugin'
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/classpath")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir
    doLast {
        outputDir.mkdirs()
        def classpath=file("$outputDir/plugin-classpath.txt")
        def text=""
        sourceSets.main.runtimeClasspath.each {
            if(!it.isDirectory() && it.name.endsWith(".jar")){
                text+="$it.absolutePath\n"
            }
        }
        classpath.text=text
    }
}

def cloneGeneratedJars(def project) {
    def destination = Files.createDirectories(Paths.get("$buildDir").resolve("libs"))
    project.buildDir.toPath().resolve("libs").eachFile {
        Files.copy(it,
            destination.resolve(it.toFile().getName()),
            StandardCopyOption.REPLACE_EXISTING)
    }
}

task copySerenityCore(dependsOn: ':serenity-core:jar') {
    doLast {
        cloneGeneratedJars(project(':serenity-core'))
    }
}

task copySerenityJunit(dependsOn: ':serenity-junit:jar') {
    doLast {
        cloneGeneratedJars(project(':serenity-junit'))
    }
}

dependencies {
    compile project(':serenity-model')
    compile project(':serenity-core')
}
